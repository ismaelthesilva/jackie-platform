// Form PDF Email Service
// Generates PDF from form responses and sends to Dr. Jackie via EmailJS

import jsPDF from 'jspdf';
import 'jspdf-autotable';
import emailjs from '@emailjs/browser';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface FormData {
  clientName: string;
  clientEmail: string;
  formType: string;
  responses: Record<string, string | number | string[]>;
}

class FormPDFEmailService {
  private serviceId = 'service_28v1fvr';
  private drJackieTemplateId = 'template_dr_jackie_form'; // Template for Dr. Jackie
  private publicKey = 'ezbPPmM_lDMistyGT';
  private drJackieEmail = 'doc@jackiesouto.com';

  /**
   * Generate PDF from form responses
   */
  private generateFormPDF(formData: FormData): string {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;

    // Add header with branding
    doc.setFontSize(24);
    doc.setTextColor(16, 185, 129); // Emerald color
    doc.text('Dr. Jackie Souto', margin, 30);
    
    doc.setFontSize(12);
    doc.setTextColor(107, 114, 128); // Gray color
    doc.text('Health & Fitness Coach', margin, 40);
    doc.text('New Client Form Submission', margin, 48);
    
    // Add date
    const currentDate = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    doc.text(`Received: ${currentDate}`, margin, 56);
    
    // Add line separator
    doc.setDrawColor(229, 231, 235);
    doc.line(margin, 60, pageWidth - margin, 60);
    
    let yPosition = 75;

    // Client Information Section
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Client Information', margin, yPosition);
    yPosition += 10;
    
    doc.setFontSize(11);
    doc.setTextColor(75, 85, 99);
    doc.text(`Name: ${formData.clientName}`, margin + 5, yPosition);
    yPosition += 8;
    doc.text(`Email: ${formData.clientEmail}`, margin + 5, yPosition);
    yPosition += 8;
    doc.text(`Form Type: ${this.formatFormType(formData.formType)}`, margin + 5, yPosition);
    yPosition += 15;

    // Form Responses Section
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Form Responses', margin, yPosition);
    yPosition += 10;

    // Convert responses to table data
    const tableData: any[] = [];
    
    Object.entries(formData.responses).forEach(([key, value]) => {
      const formattedKey = this.formatQuestionKey(key);
      const formattedValue = this.formatValue(value);
      
      tableData.push([formattedKey, formattedValue]);
    });

    // Add table with responses
    doc.autoTable({
      startY: yPosition,
      head: [['Question', 'Response']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [16, 185, 129], // Emerald color
        textColor: [255, 255, 255],
        fontSize: 12,
        fontStyle: 'bold'
      },
      bodyStyles: {
        fontSize: 10,
        textColor: [31, 41, 55]
      },
      alternateRowStyles: {
        fillColor: [249, 250, 251]
      },
      columnStyles: {
        0: { cellWidth: 70, fontStyle: 'bold' },
        1: { cellWidth: 'auto' }
      },
      margin: { left: margin, right: margin }
    });

    // Add footer
    const finalY = (doc as any).lastAutoTable.finalY || yPosition + 100;
    doc.setFontSize(10);
    doc.setTextColor(107, 114, 128);
    doc.text('Generated by Jackie Platform - jackiesouto.com', margin, finalY + 20);
    
    // Return as base64 string for email attachment
    return doc.output('dataurlstring');
  }

  /**
   * Format form type for display
   */
  private formatFormType(formType: string): string {
    const typeMap: Record<string, string> = {
      'fitness_br': 'Fitness Form (Portuguese)',
      'fitness_usa': 'Fitness Form (English)',
      'nutrition_br': 'Nutrition Form (Portuguese)',
      'nutrition_usa': 'Nutrition Form (English)',
      'pre_signup': 'Pre-Signup Interest Form',
      'test_ai': 'Test Form',
      'diet_form': 'Diet Form'
    };
    
    return typeMap[formType] || formType;
  }

  /**
   * Format question keys to be more readable
   */
  private formatQuestionKey(key: string): string {
    return key
      .replace(/_/g, ' ')
      .replace(/\b\w/g, c => c.toUpperCase())
      .replace(/Br$/, '(BR)')
      .replace(/Usa$/, '(USA)');
  }

  /**
   * Format response values
   */
  private formatValue(value: string | number | string[]): string {
    if (Array.isArray(value)) {
      return value.join(', ');
    }
    
    if (typeof value === 'boolean') {
      return value ? 'Yes' : 'No';
    }
    
    return String(value);
  }

  /**
   * Send form PDF to Dr. Jackie via email
   */
  public async sendFormToDrJackie(formData: FormData): Promise<boolean> {
    try {
      console.log('üìß Generating PDF and sending to Dr. Jackie...');
      
      // Generate PDF
      const pdfDataUrl = this.generateFormPDF(formData);
      
      // Prepare email parameters
      const templateParams = {
        to_email: this.drJackieEmail,
        subject: `New ${this.formatFormType(formData.formType)} - ${formData.clientName}`,
        client_name: formData.clientName,
        client_email: formData.clientEmail,
        form_type: this.formatFormType(formData.formType),
        submission_date: new Date().toLocaleString(),
        message: `New form submission received from ${formData.clientName} (${formData.clientEmail}). See attached PDF for complete details.`,
        pdf_attachment: pdfDataUrl
      };

      // Send email via EmailJS
      const response = await emailjs.send(
        this.serviceId,
        this.drJackieTemplateId,
        templateParams,
        this.publicKey
      );

      console.log('‚úÖ Form PDF sent successfully to Dr. Jackie:', response);
      return true;
      
    } catch (error) {
      console.error('‚ùå Error sending form PDF to Dr. Jackie:', error);
      return false;
    }
  }

  /**
   * Send confirmation email to client (optional)
   */
  public async sendClientConfirmation(formData: FormData): Promise<boolean> {
    try {
      const templateParams = {
        to_email: formData.clientEmail,
        client_name: formData.clientName,
        subject: `Form Received - Dr. Jackie Will Be In Touch Soon`,
        message: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); padding: 40px 20px; text-align: center;">
              <h1 style="color: white; margin: 0; font-size: 24px;">Thank You, ${formData.clientName}! üéâ</h1>
            </div>
            
            <div style="padding: 40px 20px; background-color: white;">
              <p style="color: #4b5563; line-height: 1.6; margin-bottom: 20px;">
                Dr. Jackie has received your ${this.formatFormType(formData.formType).toLowerCase()} and will personally review your information.
              </p>
              
              <div style="background-color: #f0fdf4; border-left: 4px solid #10b981; padding: 20px; margin: 20px 0; border-radius: 0 8px 8px 0;">
                <p style="color: #15803d; margin: 0; font-weight: bold;">What happens next?</p>
                <ul style="color: #374151; line-height: 1.8; margin: 10px 0;">
                  <li>Dr. Jackie will review your responses carefully</li>
                  <li>You'll receive a personalized plan within 24-48 hours</li>
                  <li>Questions? Email doc@jackiesouto.com</li>
                </ul>
              </div>
              
              <p style="color: #6b7280; margin-top: 30px; font-size: 14px;">
                Best regards,<br>
                <strong style="color: #10b981;">Dr. Jackie Souto</strong><br>
                Health & Fitness Coach
              </p>
            </div>
          </div>
        `
      };

      await emailjs.send(
        this.serviceId,
        'template_client_confirmation',
        templateParams,
        this.publicKey
      );

      console.log('‚úÖ Confirmation email sent to client');
      return true;
      
    } catch (error) {
      console.error('‚ö†Ô∏è Error sending client confirmation (non-critical):', error);
      return false;
    }
  }
}

export const formPDFEmailService = new FormPDFEmailService();
export default formPDFEmailService;
